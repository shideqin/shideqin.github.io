<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿德的博客</title>
  
  <subtitle>关注小众语言，记录、分享技术点滴！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://phpkoo.com/"/>
  <updated>2022-07-27T06:57:43.827Z</updated>
  <id>https://phpkoo.com/</id>
  
  <author>
    <name>阿德</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>lua利用metatable实现类的继承和多态</title>
    <link href="https://phpkoo.com/posts/cl638w6rd008jzwomfill6tra.html"/>
    <id>https://phpkoo.com/posts/cl638w6rd008jzwomfill6tra.html</id>
    <published>2022-07-27T05:47:09.000Z</published>
    <updated>2022-07-27T06:57:43.827Z</updated>
    
    <content type="html"><![CDATA[<p>在lua原生语法特性中是不具备面向对象设计的特性。因此，要想在lua上像其他高级语言一样使用面向对象的设计方法，就需要使用原生的元表(metatable)来模拟面向对象设计。</p><p><strong>一、元表setmetatable</strong><br>对指定 table 设置元表(metatable)，如果元表(metatable)中存在__metatable 键值，setmetatable 会失败。</p><p>以下实例演示了如何对指定的表设置元表：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mytable = &#123;&#125;                          <span class="comment">-- 普通表</span></span><br><span class="line">mymetatable = &#123;&#125;                      <span class="comment">-- 元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,mymetatable)     <span class="comment">-- 把 mymetatable 设为 mytable 的元表</span></span><br></pre></td></tr></table></figure><p><strong>二、元表__index 元方法</strong><br>这是 metatable 最常用的键。<br>当你通过键来访问 table 的时候，如果这个键没有值，那么Lua就会寻找该table的metatable（假定有metatable）中的__ index键。如果__ index包含一个表格，Lua会在表格中查找相应的键。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">other = &#123; foo = <span class="number">3</span> &#125;</span><br><span class="line">t = <span class="built_in">setmetatable</span>(&#123;&#125;, &#123; <span class="built_in">__index</span> = other &#125;)</span><br><span class="line"><span class="built_in">print</span>(t.foo)</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="built_in">print</span>(t.bar)</span><br><span class="line"><span class="literal">nil</span></span><br></pre></td></tr></table></figure><p><strong>三、使用metatable实现继承</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _M = &#123;</span><br><span class="line">        version = <span class="string">'lua 1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> parent = &#123;</span><br><span class="line">        <span class="built_in">__index</span> = _M</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent.new</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">-- 初始化new，如果没有这句，那么类所建立的对象如果有一个改变，其他对象都会改变</span></span><br><span class="line">        <span class="keyword">local</span> new = &#123;&#125;</span><br><span class="line">        <span class="comment">-- 使用setmetatable来实现继承</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(new, parent)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M:echo</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"M:echo "</span>..self.version)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>四、使用metatable实现重载和多态</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> _M = &#123;</span><br><span class="line">        version = <span class="string">'lua 1.0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> parent = &#123;</span><br><span class="line">        <span class="built_in">__index</span> = _M</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parent.new</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">-- 初始化new，如果没有这句，那么类所建立的对象如果有一个改变，其他对象都会改变</span></span><br><span class="line">        <span class="keyword">local</span> new = &#123;&#125;</span><br><span class="line">        <span class="comment">-- 使用setmetatable来实现继承</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(new, parent)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M:echo</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"M:echo "</span>..self.version)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> _M2 = parent.new()</span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> child = &#123;</span><br><span class="line">        <span class="built_in">__index</span> = _M2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">child.new</span><span class="params">()</span></span></span><br><span class="line">        <span class="comment">-- 初始化new，如果没有这句，那么类所建立的对象如果有一个改变，其他对象都会改变</span></span><br><span class="line">        <span class="keyword">local</span> new = &#123;&#125;</span><br><span class="line">        <span class="comment">-- 使用setmetatable来实现继承</span></span><br><span class="line">        <span class="built_in">setmetatable</span>(new, child)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 重载echo方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_M2:echo</span><span class="params">()</span></span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">"M2:echo "</span>..self.version)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test = parent.new()</span><br><span class="line">test:echo()</span><br><span class="line"></span><br><span class="line">test = child.new()</span><br><span class="line">test:echo()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在lua原生语法特性中是不具备面向对象设计的特性。因此，要想在lua上像其他高级语言一样使用面向对象的设计方法，就需要使用原生的元表(metatable)来模拟面向对象设计。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、元表setmetatable&lt;/strong&gt;&lt;br&gt;对指定 t
      
    
    </summary>
    
    
      <category term="LUA" scheme="https://phpkoo.com/categories/LUA/"/>
    
      <category term="OOP" scheme="https://phpkoo.com/categories/LUA/OOP/"/>
    
    
      <category term="lua" scheme="https://phpkoo.com/tags/lua/"/>
    
      <category term="面向对象" scheme="https://phpkoo.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="metatable" scheme="https://phpkoo.com/tags/metatable/"/>
    
  </entry>
  
  <entry>
    <title>openssl模块安装luaossl（luacrypto）</title>
    <link href="https://phpkoo.com/posts/cl638w6rp009bzwom3yg1ftm3.html"/>
    <id>https://phpkoo.com/posts/cl638w6rp009bzwom3yg1ftm3.html</id>
    <published>2022-07-27T01:43:20.000Z</published>
    <updated>2022-07-27T06:43:17.560Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://luarocks.org/modules/daurnimator/luaossl" target="_blank" rel="noopener">luaossl</a> 是<a href="https://luarocks.org/modules/starius/luacrypto" target="_blank" rel="noopener">luacrypto</a>的代替版本，是针对 Lua 5.1、5.2、5.3 和 LuaJIT 的 OpenSSL 综合绑定。是 Lua 世界中最全面的 OpenSSL 绑定。luaosll安装依赖OpenSSL库，所以需要先安装OpenSSL。</p><p><strong>一、安装OpenSSL</strong><br>下载好的OpenSSL源码目录下，编译安装OpenSSL（以下均使用默认路径“/usr/local”进行安装）</p><p>1）生成Makefile文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据编译平台及环境自动生成Makefile文件，可以通过./config --prefix指定安装路径，-Wl,-rpath参数指定OpenSSL运行时依赖libcrypto、libssl库的路径。</span></span><br><span class="line">./config -Wl,-rpath,/usr/<span class="built_in">local</span>/lib</span><br></pre></td></tr></table></figure><p>2）安装OpenSSL</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>3）查看OpenSSL版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">openssl version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示如下格式内容说明安装成功（本文以安装OpenSSL 1.1.1q为例）</span></span><br><span class="line">OpenSSL 1.1.1q  5 Jul 2022 (Library: OpenSSL 1.1.1k  FIPS 25 Mar 2021)</span><br></pre></td></tr></table></figure><p><strong>二、安装luaosll</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">luarocks install luaossl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示如下格式内容说明安装成功</span></span><br><span class="line">Installing https://luarocks.org/luaossl-20220711-0.src.rock</span><br><span class="line"></span><br><span class="line">luaossl 20220711-0 depends on lua (5.1-1 provided by VM)</span><br><span class="line">Applying patch config.h.diff...</span><br><span class="line">Hunk 1 found at offset 2...</span><br><span class="line">gcc -O2 -fPIC -I/usr/<span class="built_in">local</span>/include -c src/openssl.c -o src/openssl.o -D_REENTRANT -D_THREAD_SAFE -DCOMPAT53_PREFIX=luaossl -D_GNU_SOURCE -I/usr/<span class="built_in">local</span>/include -I/usr/<span class="built_in">local</span>/include</span><br><span class="line">gcc -O2 -fPIC -I/usr/<span class="built_in">local</span>/include -c vendor/compat53/c-api/compat-5.3.c -o vendor/compat53/c-api/compat-5.3.o -D_REENTRANT -D_THREAD_SAFE -DCOMPAT53_PREFIX=luaossl -D_GNU_SOURCE -I/usr/<span class="built_in">local</span>/include -I/usr/<span class="built_in">local</span>/include</span><br><span class="line">gcc  -shared -o _openssl.so src/openssl.o vendor/compat53/c-api/compat-5.3.o -L/usr/<span class="built_in">local</span>/lib64 -L/usr/<span class="built_in">local</span>/lib64 -Wl,-rpath,/usr/<span class="built_in">local</span>/lib64 -Wl,-rpath,/usr/<span class="built_in">local</span>/lib64 -lssl -lcrypto -lpthread -lm -ldl</span><br><span class="line">luaossl 20220711-0 is now installed <span class="keyword">in</span> /usr/<span class="built_in">local</span> (license: MIT/X11)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://luarocks.org/modules/daurnimator/luaossl&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;luaossl&lt;/a&gt; 是&lt;a href=&quot;https://luarocks.org/modu
      
    
    </summary>
    
    
      <category term="LUA" scheme="https://phpkoo.com/categories/LUA/"/>
    
      <category term="OpenSSL" scheme="https://phpkoo.com/categories/LUA/OpenSSL/"/>
    
    
      <category term="lua" scheme="https://phpkoo.com/tags/lua/"/>
    
      <category term="luaossl" scheme="https://phpkoo.com/tags/luaossl/"/>
    
      <category term="luacrypto" scheme="https://phpkoo.com/tags/luacrypto/"/>
    
      <category term="luarocks" scheme="https://phpkoo.com/tags/luarocks/"/>
    
      <category term="OpenSSL" scheme="https://phpkoo.com/tags/OpenSSL/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes使用KEDA通过Prometheus触发HPA</title>
    <link href="https://phpkoo.com/posts/cl638w6p5003pzwoma02q8x3c.html"/>
    <id>https://phpkoo.com/posts/cl638w6p5003pzwoma02q8x3c.html</id>
    <published>2022-06-02T00:45:00.000Z</published>
    <updated>2022-06-02T02:25:43.243Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://keda.sh/" target="_blank" rel="noopener">KEDA</a> 是一个基于 Kubernetes 的事件驱动自动缩放器。使用 KEDA，您可以根据需要处理的事件数量来驱动 Kubernetes 中任何容器的扩展。KEDA可以支持很多自定义事件源，如：Mysql、MongoDB、Redis、ActiveMQ、Kafka、Prometheus、Metrics API等。本文使用nginx中的stub_status数据 + Prometheus为事件源进行KEDA HPA配置。</p><p><strong>一、开启nginx(stub_status)</strong><br>nginx中的stub_status模块主要用于查看Nginx的一些状态信息。</p><p>1）查看nginx时候有安装该模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/<span class="built_in">local</span>/nginx/sbin/nginx -V</span><br></pre></td></tr></table></figure><p>2）安装stub_status模块<br>（注意：有的话可以忽略此步骤，就不用安装了）<br>在nginx编译安装的时候加上参数 “–with-http_stub_status_module”,就安装了这个模块。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --with-http_stub_status_module</span><br></pre></td></tr></table></figure><p>3）开启stub_status</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /nginx_status &#123;</span><br><span class="line">    <span class="attribute">stub_status</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">allow</span> <span class="number">127.0.0.1</span>;  <span class="comment">#only allow requests from localhost</span></span><br><span class="line">    <span class="attribute">deny</span> all;   <span class="comment">#deny all other hosts</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>二、在kubernetes中运行nginx-prometheus-exporter</strong><br>nginx-prometheus-exporter 是将 stub_status 指标转换为 Prometheus 指标类型，最终可以由 Prometheus 进行收集。</p><p>在Kubernetes里运行</p><p>1）创建一个无状态服务（Deployment）</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-prometheus</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">apps.deployment-default-nginx-prometheus</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">apps.deployment-default-nginx-prometheus</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">apps.deployment-default-nginx-prometheus</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">nginx-prometheus</span></span><br><span class="line">          <span class="attr">image:</span> <span class="string">nginx/nginx-prometheus-exporter:0.10.0</span></span><br><span class="line">          <span class="attr">command:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">nginx-prometheus-exporter</span></span><br><span class="line">          <span class="attr">args:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">'-nginx.scrape-uri=http://127.0.0.1/nginx_status'</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br></pre></td></tr></table></figure><p>2）创建一个Service服务</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-prometheus</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">metrics-prometheus-discovery:</span> <span class="string">'true'</span> <span class="comment"># for monitoring discovery</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">prometheus</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">9113</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">9113</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br></pre></td></tr></table></figure><p><strong>三、配置kubernetes中的Monitor服务</strong></p><p>1）创建一个ServiceMonitor</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">monitoring.coreos.com/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceMonitor</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-monitor</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">metrics-prometheus-discovery:</span> <span class="string">'true'</span> <span class="comment"># for monitoring discovery</span></span><br><span class="line">  <span class="attr">namespaceSelector:</span></span><br><span class="line">    <span class="attr">matchNames:</span></span><br><span class="line">     <span class="bullet">-</span> <span class="string">default</span></span><br><span class="line">  <span class="attr">endpoints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">port:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">interval:</span> <span class="string">5s</span></span><br></pre></td></tr></table></figure><p>2）创建KEDA（ScaledObject）缩放规则</p><p>Prometheus的集群内访问地址是：<a href="http://prometheus-operated.cattle-prometheus.svc:9090" target="_blank" rel="noopener">http://prometheus-operated.cattle-prometheus.svc:9090</a></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">keda.sh/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ScaledObject</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">nginx-prometheus-scaledobject</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">scaleTargetRef:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nginx</span></span><br><span class="line">  <span class="attr">pollingInterval:</span> <span class="number">5</span>   <span class="comment"># Optional. Default: 30 seconds</span></span><br><span class="line">  <span class="attr">cooldownPeriod:</span>  <span class="number">60</span>  <span class="comment"># Optional. Default: 300 seconds</span></span><br><span class="line">  <span class="attr">minReplicaCount:</span> <span class="number">1</span>   <span class="comment"># Optional. Default: 0</span></span><br><span class="line">  <span class="attr">maxReplicaCount:</span> <span class="number">3</span>   <span class="comment"># Optional. Default: 100</span></span><br><span class="line">  <span class="attr">triggers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">type:</span> <span class="string">prometheus</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">serverAddress:</span> <span class="string">http://prometheus-operated.cattle-monitoring-system.svc.cluster.local:9090</span> </span><br><span class="line">      <span class="attr">metricName:</span> <span class="string">nginx_http_requests_total</span></span><br><span class="line">      <span class="attr">threshold:</span> <span class="string">'100'</span></span><br><span class="line">      <span class="attr">query:</span> <span class="string">sum(rate(nginx_http_requests_total[10s]))</span></span><br></pre></td></tr></table></figure><p><strong>ps:</strong></p><p>在Docker中运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9113:9113 nginx/nginx-prometheus-exporter:0.10.0 -nginx.scrape-uri=http://127.0.0.1/nginx_status</span><br></pre></td></tr></table></figure><p>运行后，可以通过9113 端口来访问 Prometheus 收集的数据，可以配合Grafana来实现数据可视化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://localhost:9113/metrics</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://keda.sh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;KEDA&lt;/a&gt; 是一个基于 Kubernetes 的事件驱动自动缩放器。使用 KEDA，您可以根据需要处理的事件数量来驱动 Kubernetes 中任何容器
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://phpkoo.com/categories/Kubernetes/"/>
    
    
      <category term="Kubernetes" scheme="https://phpkoo.com/tags/Kubernetes/"/>
    
      <category term="KEDA" scheme="https://phpkoo.com/tags/KEDA/"/>
    
      <category term="HPA" scheme="https://phpkoo.com/tags/HPA/"/>
    
      <category term="Prometheus" scheme="https://phpkoo.com/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>使用openssl创建多泛域名及IP的自签名证书</title>
    <link href="https://phpkoo.com/posts/cl638w6s200a7zwom1mnq9l2o.html"/>
    <id>https://phpkoo.com/posts/cl638w6s200a7zwom1mnq9l2o.html</id>
    <published>2021-12-22T05:33:35.000Z</published>
    <updated>2021-12-22T06:28:27.884Z</updated>
    
    <content type="html"><![CDATA[<p>在开发环境及私有环境下需要使用SSL，于是使用openssl创建自签发证书，支持多域名、泛域名、直接IP访问。</p><p><strong>一、使用openssl生成证书自签名</strong></p><p>openssl在centos中是标配，所以直接在centos中操作，因为要多个域名和IP，故而需要编辑一个配置文件，如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vim req.cnf</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义输入用户信息选项的"特征名称"字段名，该扩展字段定义了多项用户信息。</span></span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line"><span class="comment"># 生成自签名证书时要使用的证书扩展项字段名，该扩展字段定义了要加入到证书中的一系列扩展项。</span></span><br><span class="line">x509_extensions = v3_req</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果设为no，那么 req 指令将直接从配置文件中读取证书字段的信息，而不提示用户输入。</span></span><br><span class="line">prompt = no</span><br><span class="line"></span><br><span class="line">[req_distinguished_name]</span><br><span class="line"><span class="comment">#国家代码，一般都是CN(大写)</span></span><br><span class="line">C = CN</span><br><span class="line"><span class="comment">#省份</span></span><br><span class="line">ST = Beijing</span><br><span class="line"><span class="comment">#城市</span></span><br><span class="line">L = Beijing</span><br><span class="line"><span class="comment">#企业/单位名称</span></span><br><span class="line">O = phpkoo</span><br><span class="line"><span class="comment">#企业部门</span></span><br><span class="line">OU = phpkoo</span><br><span class="line"><span class="comment">#证书的主域名</span></span><br><span class="line">CN = phpkoo.com</span><br><span class="line"></span><br><span class="line"><span class="comment">##### 要加入到证书请求中的一系列扩展项 #####</span></span><br><span class="line">[v3_req]</span><br><span class="line">keyUsage = critical, digitalSignature, keyAgreement</span><br><span class="line">extendedKeyUsage = serverAuth</span><br><span class="line">subjectAltName = @alt_names</span><br><span class="line"></span><br><span class="line">[ alt_names ]</span><br><span class="line">DNS.1=第一个域名</span><br><span class="line">DNS.2=第二个域名</span><br><span class="line">DNS.N=第N个域名</span><br><span class="line">IP.1=第一个IP</span><br><span class="line">IP.2=第二个IP</span><br><span class="line">IP.N=第N个IP</span><br></pre></td></tr></table></figure><p>其中IP配置项，可有可无。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ssl/</span><br><span class="line">$ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout ./ssl/private.key -out ./ssl/ssl.crt -config ./req.cnf -sha256</span><br></pre></td></tr></table></figure><p>至此证书生成完成</p><p>可以下载ssl目录下的private.key和ssl.crt文件</p><p>openssl 命令参数说明：</p><p>req         大致有3个功能：生成证书请求文件、验证证书请求文件和创建根CA。<br>  -x509     说明生成自签名证书。<br>  -nodes    openssl req在自动创建私钥时，将总是加密该私钥文件，并提示输入加密的密码。可以使用”-nodes”选项禁止加密私钥文件。<br>  -days     指定所颁发的证书有效期。<br>  -key      指定输入的密钥，如果不指定此选项会根据 <code>-newkey</code> 选项的参数生成密钥对。<br>  -newkey   指定生成一个新的密钥对，只有在没有 <code>-key</code> 选项的时候才生效，参数形式为<code>rsa:numbits</code>或者<code>dsa:file</code>，例如：<code>rsa:2048</code> rsa表示创建rsa私钥，2048表示私钥的长度。<br>  -keyout   指定私钥保存位置。<br>  -out      新的证书请求文件位置。<br>  -config   指定req的配置文件，指定后将忽略所有的其他配置文件。如果不指定则默认使用/etc/pki/tls/openssl.cnf中req段落的值。</p><p><strong>二、证书如何使用</strong></p><p><strong>此时访问会出现如下问题</strong><br><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-0.png" alt=""></p><p><strong>你还得在系统上安装一下证书，安装步骤如下</strong><br>1、在Windows中导入证书</p><ul><li>第一步：双击ssl.crt文件打开证书文件，出现如下界面</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-1.png" alt=""></p><ul><li>第二步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-2.png" alt=""></p><ul><li>第三步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-3.png" alt=""></p><ul><li>第四步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-4.png" alt=""></p><ul><li>第五步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-5.png" alt=""></p><p><strong>证书安装，完成</strong></p><p><strong>重启浏览器，才能生效</strong></p><p>2、测试效果<br><img src="https://upload.phpkoo.com/uploads/2021/12/ssl-6.png" alt=""></p><p>3、火狐浏览器处理</p><p>Firefox默认情况不，还是不信任自签名证书</p><p>打开火狐浏览器输入<code>about:config</code>进行设置界面</p><ul><li>第一步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/firefox-1.png" alt=""></p><ul><li>第二步：</li></ul><p>输入<code>security.enterprise_roots.enabled</code>修改为<code>true</code></p><p><img src="https://upload.phpkoo.com/uploads/2021/12/firefox-2.png" alt=""></p><ul><li>第三步：</li></ul><p><img src="https://upload.phpkoo.com/uploads/2021/12/firefox-3.png" alt=""></p><p><strong>设置完成</strong></p><p><strong>重启浏览器，才能生效</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在开发环境及私有环境下需要使用SSL，于是使用openssl创建自签发证书，支持多域名、泛域名、直接IP访问。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、使用openssl生成证书自签名&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;openssl在centos中是标配，所以直接在centos中
      
    
    </summary>
    
    
      <category term="OpenSSL" scheme="https://phpkoo.com/categories/OpenSSL/"/>
    
      <category term="HTTPS" scheme="https://phpkoo.com/categories/OpenSSL/HTTPS/"/>
    
      <category term="SSL" scheme="https://phpkoo.com/categories/OpenSSL/HTTPS/SSL/"/>
    
    
      <category term="OpenSSL" scheme="https://phpkoo.com/tags/OpenSSL/"/>
    
      <category term="HTTPS证书" scheme="https://phpkoo.com/tags/HTTPS%E8%AF%81%E4%B9%A6/"/>
    
      <category term="SSL证书" scheme="https://phpkoo.com/tags/SSL%E8%AF%81%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>golang中net.http请求时header中的Content-Length无效坑</title>
    <link href="https://phpkoo.com/posts/cl638w6r7007yzwomd85s02bv.html"/>
    <id>https://phpkoo.com/posts/cl638w6r7007yzwomd85s02bv.html</id>
    <published>2021-12-13T02:52:07.000Z</published>
    <updated>2021-12-13T03:30:47.284Z</updated>
    
    <content type="html"><![CDATA[<p>在一次和国内某云厂商对接对象存储时，因为他们对象存储服务，是直接使用的是第三方开源服务，开源服务默认并不支持<strong>chunked</strong>编码（而国内其它大厂一般都是支持chunked编码）。导致上传文件一直报<strong>HTTP/1.1 411 Length Required</strong>错误，出现问题的原因是说，我没有传Content-Length。</p><p>而明明我在header里设置了Content-Length，但是抓包发现，实际却变成了chunked<br><img src="https://upload.phpkoo.com/uploads/2021/12/net.http-02.png" alt=""></p><p>经过反复的测试情况都依旧，直到在github上找到了这个<a href="https://github.com/golang/go/issues/16264" target="_blank" rel="noopener">https://github.com/golang/go/issues/16264</a></p><p>然后查看了golang源码</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewRequest</span><span class="params">(method, url <span class="keyword">string</span>, body io.Reader)</span> <span class="params">(*Request, error)</span></span> &#123;</span><br><span class="line">    <span class="keyword">if</span> method == <span class="string">""</span> &#123;</span><br><span class="line">        <span class="comment">// We document that "" means "GET" for Request.Method, and people have</span></span><br><span class="line">        <span class="comment">// relied on that from NewRequest, so keep that working.</span></span><br><span class="line">        <span class="comment">// We still enforce validMethod for non-empty methods.</span></span><br><span class="line">        method = <span class="string">"GET"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> !validMethod(method) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, fmt.Errorf(<span class="string">"net/http: invalid method %q"</span>, method)</span><br><span class="line">    &#125;</span><br><span class="line">    u, err := parseURL(url) <span class="comment">// Just url.Parse (url is shadowed for godoc).</span></span><br><span class="line">    <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">    &#125;</span><br><span class="line">    rc, ok := body.(io.ReadCloser)</span><br><span class="line">    <span class="keyword">if</span> !ok &amp;&amp; body != <span class="literal">nil</span> &#123;</span><br><span class="line">        rc = ioutil.NopCloser(body)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// The host's colon:port should be normalized. See Issue 14836.</span></span><br><span class="line">    u.Host = removeEmptyPort(u.Host)</span><br><span class="line">    req := &amp;Request&#123;</span><br><span class="line">        Method:     method,</span><br><span class="line">        URL:        u,</span><br><span class="line">        Proto:      <span class="string">"HTTP/1.1"</span>,</span><br><span class="line">        ProtoMajor: <span class="number">1</span>,</span><br><span class="line">        ProtoMinor: <span class="number">1</span>,</span><br><span class="line">        Header:     <span class="built_in">make</span>(Header),</span><br><span class="line">        Body:       rc,</span><br><span class="line">        Host:       u.Host,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> body != <span class="literal">nil</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> v := body.(<span class="keyword">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> *bytes.Buffer:</span><br><span class="line">            req.ContentLength = <span class="keyword">int64</span>(v.Len())</span><br><span class="line">            buf := v.Bytes()</span><br><span class="line">            req.GetBody = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span> &#123;</span><br><span class="line">                r := bytes.NewReader(buf)</span><br><span class="line">                <span class="keyword">return</span> ioutil.NopCloser(r), <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> *bytes.Reader:</span><br><span class="line">            req.ContentLength = <span class="keyword">int64</span>(v.Len())</span><br><span class="line">            snapshot := *v</span><br><span class="line">            req.GetBody = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span> &#123;</span><br><span class="line">                r := snapshot</span><br><span class="line">                <span class="keyword">return</span> ioutil.NopCloser(&amp;r), <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">case</span> *strings.Reader:</span><br><span class="line">            req.ContentLength = <span class="keyword">int64</span>(v.Len())</span><br><span class="line">            snapshot := *v</span><br><span class="line">            req.GetBody = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span> &#123;</span><br><span class="line">                r := snapshot</span><br><span class="line">                <span class="keyword">return</span> ioutil.NopCloser(&amp;r), <span class="literal">nil</span></span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="comment">// This is where we'd set it to -1 (at least</span></span><br><span class="line">            <span class="comment">// if body != NoBody) to mean unknown, but</span></span><br><span class="line">            <span class="comment">// that broke people during the Go 1.8 testing</span></span><br><span class="line">            <span class="comment">// period. People depend on it being 0 I</span></span><br><span class="line">            <span class="comment">// guess. Maybe retry later. See Issue 18117.</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// For client requests, Request.ContentLength of 0</span></span><br><span class="line">        <span class="comment">// means either actually 0, or unknown. The only way</span></span><br><span class="line">        <span class="comment">// to explicitly say that the ContentLength is zero is</span></span><br><span class="line">        <span class="comment">// to set the Body to nil. But turns out too much code</span></span><br><span class="line">        <span class="comment">// depends on NewRequest returning a non-nil Body,</span></span><br><span class="line">        <span class="comment">// so we use a well-known ReadCloser variable instead</span></span><br><span class="line">        <span class="comment">// and have the http package also treat that sentinel</span></span><br><span class="line">        <span class="comment">// variable to mean explicitly zero.</span></span><br><span class="line">        <span class="keyword">if</span> req.GetBody != <span class="literal">nil</span> &amp;&amp; req.ContentLength == <span class="number">0</span> &#123;</span><br><span class="line">            req.Body = NoBody</span><br><span class="line">            req.GetBody = <span class="function"><span class="keyword">func</span><span class="params">()</span> <span class="params">(io.ReadCloser, error)</span></span> &#123; <span class="keyword">return</span> NoBody, <span class="literal">nil</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> req, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里面居然有个switch，当你使用bytes.Buffer,bytes.Reader或者strings.Reader作为Body的时候，它会自动给你设置req.ContentLength…</p><p>所以，问题不是当你Post一个ReadCloser的时候，就会变成chunked，而是你Post非这三种类型的body进来的时候都没有Content-Length，需要自己显式设置。代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">req, _ := http.NewRequest(method, url, bodyReader)</span><br><span class="line">req.ContentLength = req.Header.Get(<span class="string">"Content-Length"</span>)</span><br></pre></td></tr></table></figure><p>设置了req.ContentLength之后，抓包如下确实不再是chunked编码了，抓包如下<br><img src="https://upload.phpkoo.com/uploads/2021/12/net.http-01.png" alt=""><br>至此问题解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在一次和国内某云厂商对接对象存储时，因为他们对象存储服务，是直接使用的是第三方开源服务，开源服务默认并不支持&lt;strong&gt;chunked&lt;/strong&gt;编码（而国内其它大厂一般都是支持chunked编码）。导致上传文件一直报&lt;strong&gt;HTTP/1.1 411 Le
      
    
    </summary>
    
    
      <category term="GoLang" scheme="https://phpkoo.com/categories/GoLang/"/>
    
    
      <category term="go" scheme="https://phpkoo.com/tags/go/"/>
    
      <category term="http" scheme="https://phpkoo.com/tags/http/"/>
    
      <category term="Content-Length" scheme="https://phpkoo.com/tags/Content-Length/"/>
    
  </entry>
  
  <entry>
    <title>luarocks安装lua-mongo模块</title>
    <link href="https://phpkoo.com/posts/cl638w6rc008hzwomdai3epuu.html"/>
    <id>https://phpkoo.com/posts/cl638w6rc008hzwomdai3epuu.html</id>
    <published>2021-06-22T01:41:59.000Z</published>
    <updated>2021-06-22T03:03:02.116Z</updated>
    
    <content type="html"><![CDATA[<p>lua-mongo 是对 MongoDB C Driver 1.16 或更高版本的 Lua 的绑定，githup仓库：<a href="https://github.com/neoxic/lua-mongo" target="_blank" rel="noopener">https://github.com/neoxic/lua-mongo</a></p><p>通过luarocks方式安装lua模块</p><p>一、安装luarocks工具，官网:<a href="https://luarocks.org/" target="_blank" rel="noopener">https://luarocks.org/</a><br>二、安装lua-mongo模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luarocks install lua-mongo</span><br></pre></td></tr></table></figure><p>安装时，报以下错误信息</p><p>Error: Could not find expected file libmongoc-1.0/mongoc.h, or libmongoc-1.0/mongoc.h for LIBMONGOC – you may have to install LIBMONGOC in your system and/or pass LIBMONGOC_DIR or LIBMONGOC_INCDIR to the luarocks command. Example: luarocks install mongorover LIBMONGOC_DIR=/usr/local</p><p>三、安装cmake</p><p>因为mongo-c-driver需要使用cmake进行编译</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install gcc gcc-c++ ncurses-devel</span><br><span class="line">wget wget https://cmake.org/files/v3.3/cmake-3.3.2.tar.gz</span><br><span class="line">tar -xzf cmake-3.3.2.tar.gz</span><br><span class="line"><span class="built_in">cd</span> cmake-3.3.2/</span><br><span class="line">./bootstrap</span><br><span class="line">gmake</span><br><span class="line">gmake install</span><br></pre></td></tr></table></figure><p>四、安装libmongoc库</p><p>官方安装参照：<a href="http://mongoc.org/" target="_blank" rel="noopener">http://mongoc.org/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/mongodb/mongo-c-driver/releases/download/1.17.6/mongo-c-driver-1.17.6.tar.gz</span><br><span class="line">tar -xzf mongo-c-driver-1.17.6.tar.gz</span><br><span class="line"><span class="built_in">cd</span> mongo-c-driver-1.17.6/</span><br><span class="line">cmake .</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>再执行,安装lua-mongo模块</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">luarocks install lua-mongo</span><br></pre></td></tr></table></figure><p>安装成功</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;lua-mongo 是对 MongoDB C Driver 1.16 或更高版本的 Lua 的绑定，githup仓库：&lt;a href=&quot;https://github.com/neoxic/lua-mongo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;h
      
    
    </summary>
    
    
      <category term="LUA" scheme="https://phpkoo.com/categories/LUA/"/>
    
    
      <category term="centos" scheme="https://phpkoo.com/tags/centos/"/>
    
      <category term="linux" scheme="https://phpkoo.com/tags/linux/"/>
    
      <category term="nginx" scheme="https://phpkoo.com/tags/nginx/"/>
    
      <category term="openresty" scheme="https://phpkoo.com/tags/openresty/"/>
    
      <category term="lua" scheme="https://phpkoo.com/tags/lua/"/>
    
      <category term="lua-mongo模块" scheme="https://phpkoo.com/tags/lua-mongo%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>centos下原生nginx支持openresty功能</title>
    <link href="https://phpkoo.com/posts/cl638w6qp006ezwomdzrqb7td.html"/>
    <id>https://phpkoo.com/posts/cl638w6qp006ezwomdzrqb7td.html</id>
    <published>2021-04-02T08:02:03.000Z</published>
    <updated>2021-04-02T08:46:04.979Z</updated>
    
    <content type="html"><![CDATA[<p>nginx想支持openresty的功能，需要安装以下模块及依赖<code>luajit2</code>、<code>lua-resty-core</code>、<code>lua-resty-lrucache</code>、<code>lua-nginx-module</code>、<code>ngx_devel_kit</code>以下5个依赖包必须先下载，另外如果需要同时支持SSL的话，还需要下载<code>openssl</code>依赖包（ssl只需要下载nginx编译时使用）。</p><p>一、安装openresty依赖包<br>1、安装luajit2（下载最新版本）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/luajit2/archive/v2.1-20201229.tar.gz</span><br><span class="line">tar -zxvf luajit2-2.1-20201229.tar.gz</span><br><span class="line"><span class="built_in">cd</span> luajit2-2.1-20201229</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"><span class="comment">#导入环境变量（编译nginx时需要）</span></span><br><span class="line"><span class="built_in">export</span> LUAJIT_LIB=/usr/<span class="built_in">local</span>/lib</span><br><span class="line"><span class="built_in">export</span> LUAJIT_INC=/usr/<span class="built_in">local</span>/include/luajit-2.1</span><br></pre></td></tr></table></figure><p>2、安装lua-resty-core</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/lua-resty-core/archive/v0.1.21.tar.gz</span><br><span class="line">tar -zxvf lua-resty-core-0.1.21.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-resty-core-0.1.21</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>3、安装lua-resty-lrucache</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/lua-resty-lrucache/archive/v0.10.tar.gz</span><br><span class="line">tar -zxvf lua-resty-lrucache-0.10.tar.gz</span><br><span class="line"><span class="built_in">cd</span> lua-resty-lrucache-0.10</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><p>4、解压lua-nginx-module</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/openresty/lua-nginx-module/archive/v0.10.19.tar.gz</span><br><span class="line">tar -zxvf lua-nginx-module-0.10.19.tar.gz</span><br></pre></td></tr></table></figure><p>5、解压ngx_devel_kit</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/vision5/ngx_devel_kit/archive/v0.3.1.tar.gz</span><br><span class="line">tar -zxvf ngx_devel_kit-0.3.1.tar.gz</span><br></pre></td></tr></table></figure><p>6、解压openssl</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.openssl.org/<span class="built_in">source</span>/openssl-1.1.1k.tar.gz</span><br><span class="line">tar -zxvf openssl-1.1.1k.tar.gz</span><br></pre></td></tr></table></figure><p>二、编译及安装nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">wget http://nginx.org/download/nginx-1.18.0.tar.gz</span><br><span class="line">tar -zxvf nginx-1.18.0.tar.gz</span><br><span class="line"></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/nginx \</span><br><span class="line">--with-openssl=/usr/<span class="built_in">local</span>/src/openssl-1.1.1k \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_auth_request_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-threads \</span><br><span class="line">--with-stream \</span><br><span class="line">--with-stream_ssl_module \</span><br><span class="line">--with-stream_ssl_preread_module \</span><br><span class="line">--with-http_slice_module \</span><br><span class="line">--with-compat \</span><br><span class="line">--with-file-aio \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-ld-opt=<span class="string">"-Wl,-rpath,/usr/local/lib"</span> \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/ngx_devel_kit-0.3.1 \</span><br><span class="line">--add-module=/usr/<span class="built_in">local</span>/src/lua-nginx-module-0.10.19</span><br><span class="line"></span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>三、nginx配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#设置openresty模块目录</span></span><br><span class="line">lua_package_path <span class="string">"/usr/local/lib/lua/?.lua;/usr/local/nginx/conf/lua/?.lua;;"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定dns解析服务器,实现动态upstream</span></span><br><span class="line">resolver 114.114.114.114 223.5.5.5 1.1.1.1 8.8.8.8 valid=30;</span><br><span class="line">resolver_timeout 5;</span><br></pre></td></tr></table></figure><p>四、hello openresty(/usr/local/nginx/conf/lua/hello.lua)</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ngx.<span class="built_in">print</span>(<span class="string">"hello openresty!"</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;nginx想支持openresty的功能，需要安装以下模块及依赖&lt;code&gt;luajit2&lt;/code&gt;、&lt;code&gt;lua-resty-core&lt;/code&gt;、&lt;code&gt;lua-resty-lrucache&lt;/code&gt;、&lt;code&gt;lua-nginx-module&lt;/
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="https://phpkoo.com/tags/centos/"/>
    
      <category term="linux" scheme="https://phpkoo.com/tags/linux/"/>
    
      <category term="nginx" scheme="https://phpkoo.com/tags/nginx/"/>
    
      <category term="openresty" scheme="https://phpkoo.com/tags/openresty/"/>
    
  </entry>
  
  <entry>
    <title>使用watch实时查看进程的文件句柄信息</title>
    <link href="https://phpkoo.com/posts/cl638w6s400aazwom4ijx3uhk.html"/>
    <id>https://phpkoo.com/posts/cl638w6s400aazwom4ijx3uhk.html</id>
    <published>2020-04-13T02:44:10.000Z</published>
    <updated>2020-04-13T03:20:06.755Z</updated>
    
    <content type="html"><![CDATA[<p>一、lsof相关使用<br>1、系统所有进程打开对应的句柄数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -n|awk <span class="string">'&#123;print $2&#125;'</span>|sort|uniq -c |sort -nr|more</span><br></pre></td></tr></table></figure><p>2、查看当前进程实时打开的文件数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -p 进程ID |wc -l</span><br></pre></td></tr></table></figure><p>3、查看被打开某一文件的相关进程信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof /proc</span><br></pre></td></tr></table></figure><p>4、查看监听端口25的进程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:25</span><br></pre></td></tr></table></figure><p>5、查看活动的连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i @192.168.1.2</span><br></pre></td></tr></table></figure><p>二、查看当前进程持有文件句柄数量和文件句柄最大限制</p><p>1、查看这个PID持有的句柄数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /proc/进程ID/fd | wc -l</span><br></pre></td></tr></table></figure><p>2、查看当前进程句柄数量限制</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/进程ID/limits | grep <span class="string">"files"</span></span><br></pre></td></tr></table></figure><p>三、查看系统总限制</p><p>1、查看系统总限制打开文件的最大数量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/sys/fs/file-max</span><br></pre></td></tr></table></figure><p>四、watch命令<br>watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。在Linux下，watch是周期性的执行下个程序，并全屏显示执行结果。</p><p>1、每隔一秒高亮显示网络链接数的变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d netstat -ant</span><br></pre></td></tr></table></figure><p>2、每隔一秒高亮显示http链接数的变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 -d <span class="string">'pstree|grep http'</span></span><br></pre></td></tr></table></figure><p>3、实时查看模拟攻击客户机建立起来的连接数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch <span class="string">'netstat -an | grep:21 | \ grep&lt;模拟攻击客户机的IP&gt;| wc -l'</span></span><br></pre></td></tr></table></figure><p>4、10秒一次输出系统的平均负载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 10 <span class="string">'cat /proc/loadavg'</span></span><br></pre></td></tr></table></figure><p>5、监测磁盘inode和block数目变化情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">watch -n 1 <span class="string">'df -i;df'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、lsof相关使用&lt;br&gt;1、系统所有进程打开对应的句柄数&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
    
      <category term="centos" scheme="https://phpkoo.com/tags/centos/"/>
    
      <category term="linux" scheme="https://phpkoo.com/tags/linux/"/>
    
      <category term="ulimits" scheme="https://phpkoo.com/tags/ulimits/"/>
    
  </entry>
  
  <entry>
    <title>Composer 使用记录</title>
    <link href="https://phpkoo.com/posts/635.html"/>
    <id>https://phpkoo.com/posts/635.html</id>
    <published>2019-12-28T00:45:53.000Z</published>
    <updated>2020-02-27T01:02:52.738Z</updated>
    
    <content type="html"><![CDATA[<p>Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。</p><p>运行 Composer 需要 PHP 5.3.2+ 以上版本。一些敏感的 PHP 设置和编译标志也是必须的，但对于任何不兼容项安装程序都会抛出警告。</p><p><strong>全局安装</strong> <strong>（推荐）</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br><span class="line"></span><br><span class="line">mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure><p>局部安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -sS https://getcomposer.org/installer | php</span><br></pre></td></tr></table></figure><p><strong>全局配置（推荐）</strong></p><p>阿里 Composer 全量镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure><p>取消配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">composer config -g --<span class="built_in">unset</span> repos.packagist</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Composer 是 PHP 的一个依赖管理工具。它允许你申明项目所依赖的代码库，它会在你的项目中为你安装他们。&lt;/p&gt;
&lt;p&gt;运行 Composer 需要 PHP 5.3.2+ 以上版本。一些敏感的 PHP 设置和编译标志也是必须的，但对于任何不兼容项安装程序都会抛出警告
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://phpkoo.com/categories/PHP/"/>
    
    
      <category term="php" scheme="https://phpkoo.com/tags/php/"/>
    
      <category term="composer" scheme="https://phpkoo.com/tags/composer/"/>
    
  </entry>
  
  <entry>
    <title>Xshell6 &amp; Xftp6 和谐大法</title>
    <link href="https://phpkoo.com/posts/602.html"/>
    <id>https://phpkoo.com/posts/602.html</id>
    <published>2019-12-27T01:10:56.000Z</published>
    <updated>2020-02-27T01:02:52.757Z</updated>
    
    <content type="html"><![CDATA[<p>Xshell 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。Xshell 通过互联网到远程主机的安全连接以及它创新性的设计和特色帮助用户在复杂的网络环境中享受他们的工作。<br>　　Xftp是一种灵活且轻量级的SFTP/FTP客户端，用于需要安全地通过网络传输文件的用户。文件传输被简化，使用拖拽、直接编辑和增强的同步，这些特性在直观的标签界面中被封装。</p><h4 id="Xshell-amp-Xftp-显示评估期已过，怎么解决？"><a href="#Xshell-amp-Xftp-显示评估期已过，怎么解决？" class="headerlink" title="Xshell &amp; Xftp 显示评估期已过，怎么解决？"></a>Xshell &amp; Xftp 显示评估期已过，怎么解决？</h4><p><strong>一、 卸载所有版本的Xshell，Xmanager，Xftp，Xldp和Netsarang产品</strong>，并从注册表中删除 NetSarang 目录 (HKEY_CURRENT_USER\Software\NetSarang)。</p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-c7b4ea247f6f3968-1024x645-1.jpg" alt=""></p><p><strong>二、下载 Xshell 6 &amp; Xftp 6</strong></p><p>下载方式</p><blockquote><p>在 <a href="http://www.netsarang.com/download/main.html" target="_blank" rel="noopener">http://www.netsarang.com/download/main.html</a> 选择下载评估版，收到下载地址后将下载地址加上r。<br>例如 <a href="https://cdn.netsarang.net/f8a8d224/XmanagerPowerSuite-6.0.0009.exe" target="_blank" rel="noopener">https://cdn.netsarang.net/f8a8d224/XmanagerPowerSuite-6.0.0009.exe</a> ，<br>改为 <a href="https://cdn.netsarang.net/f8a8d224/XmanagerPowerSuite-6.0.0009r.exe" target="_blank" rel="noopener">https://cdn.netsarang.net/f8a8d224/XmanagerPowerSuite-6.0.0009r.exe</a> 。<br>如果下载不带r的版本，无法输入序列号，注意不要下载到“思杰马克丁”特供版，下载完毕后，对安装包右键，属性，数字签名，如果是官方版则是“NetSarang Computer, Inc.”。</p></blockquote><p><img src="https://upload.phpkoo.com/uploads/2019/12/20191227085840.png" alt=""></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-a9351873fd98543a-1024x1014-1.jpg" alt=""></p><p><strong>三、 添加路由到 C:\Windows\System32\drivers\etc\hosts</strong></p><blockquote><p>127.0.0.1 transact.netsarang.com<br>127.0.0.1 update.netsarang.com<br>127.0.0.1 <a href="http://www.netsarang.com" target="_blank" rel="noopener">www.netsarang.com</a><br>127.0.0.1 <a href="http://www.netsarang.co.kr" target="_blank" rel="noopener">www.netsarang.co.kr</a><br>127.0.0.1 sales.netsarang.com</p></blockquote><p><strong>四、一定要在前三步骤做完之后再安装带r版本的 Xshell6 &amp; Xftp6</strong></p><blockquote><p>注册码<br>Xshell Plus 6 : 180505-117501-020791<br>Xmanager Power Suite 6 :180429-116253-999126</p></blockquote><p><strong>五、安装完成后，将对应的程序运行一次后，打开注册表，将下列字段设置为当前用户拒绝全部权限，否则会反弹</strong></p><blockquote><p>HKEY_CURRENT_USER\Software\NetSarang\Xftp\6\LiveUpdate<br>HKEY_CURRENT_USER\Software\NetSarang\Xlpd\6\LiveUpdate<br>HKEY_CURRENT_USER\Software\NetSarang\Xmanager\6\LiveUpdate<br>HKEY_CURRENT_USER\Software\NetSarang\Xshell\6\LiveUpdate</p></blockquote><p><strong>打开注册表程序（开始 -&gt; 运行 -&gt; regedit 或 win + R 打开运行输入 regedit 回车进入注册表编辑器）</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-6a0ab99e9fc7aadd-1024x912-1.jpg" alt=""></p><p><strong>点击 “高级”</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-ac71a019b4cf2ded-1024x874-1.jpg" alt=""></p><p><strong>禁用继承</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-c3496cbe0ebbb745-1024x729-1.jpg" alt=""></p><p><strong>权限转换</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-e3db2968581322d3-1024x874-1.jpg" alt=""></p><p><strong>编辑并取消各用户的所有权限</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-dceed98e752920b2-1024x750-1.jpg" alt=""></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-0ea7149d506ac2dd-1024x674-1.jpg" alt=""></p><p><strong>已注册的Xshell6</strong></p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-9a9919fa6d3464a2-1024x716-1.jpg" alt=""></p><p>Xftp同样按照以上步骤操作，把权限去掉即可。</p><p><strong>六、彻底禁用 Xshell &amp; Xftp 更新</strong></p><p>xshell菜单—-工具—选项<br>在选项设置里面，点击更新选项卡，去掉实时更新的勾选</p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-254056398bdbc76d-1024x371-1.jpg" alt=""></p><p>删除更新程序</p><p><img src="https://upload.phpkoo.com/uploads/2019/12/1926763-4f42e18be6398dc7-1024x733-1.jpg" alt=""></p><p>也可以把 LiveUpdate.exe 换成别的一个空文件来替换</p><blockquote><p>注册码可以用这个生成<br><a href="https://github.com/DoubleLabyrinth/Xmanager-keygen" target="_blank" rel="noopener">https://github.com/DoubleLabyrinth/Xmanager-keygen</a><br>需要用Python3.6 执行</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Xshell 是一个强大的安全终端模拟软件，它支持SSH1, SSH2, 以及Microsoft Windows 平台的TELNET 协议。Xshell 通过互联网到远程主机的安全连接以及它创新性的设计和特色帮助用户在复杂的网络环境中享受他们的工作。&lt;br&gt;　　Xftp是一
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
    
      <category term="xshell" scheme="https://phpkoo.com/tags/xshell/"/>
    
  </entry>
  
  <entry>
    <title>怎样增大 Linux 系统的 open file(s) 上限</title>
    <link href="https://phpkoo.com/posts/596.html"/>
    <id>https://phpkoo.com/posts/596.html</id>
    <published>2019-11-18T00:50:23.000Z</published>
    <updated>2020-02-27T01:02:52.743Z</updated>
    
    <content type="html"><![CDATA[<p>最近在工作中遇到一个问题，尝试直接将服务运行在高配（40core, 192GB；相比虚拟机来说） 的物理机上，但是发现服务打开的文件句柄达到 80 万左右就不能再开更多了。</p><p>80 万已经是一个不小的值了，通常情况下，Linux 默认的值都很小，例如：Debian 8(jessie) 给普通用户设置的 open file(s) 限制为 65536， 可以通过下面的命令查看当前限制。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line">$ <span class="built_in">ulimit</span> -Sn</span><br><span class="line">$ <span class="built_in">ulimit</span> -Hn</span><br></pre></td></tr></table></figure><p><code>ulimit</code> 是一个 shell（这里使用的是 bash） 内置命令，可以通过 <code>type ulimit</code> 验证。</p><p><code>-n</code> 即表示查看或者设置 open file(s) 的限制，在 ulimit 中，每个限制都有两种类型：</p><ul><li><code>-S</code>, soft limit, 软限制，用户可以上调软限制到硬限制</li><li><code>-H</code>, hard limit, 硬限制，非 root 用户不能修改</li></ul><p>如果没有指明，则同时修改软限制和硬限制。</p><h2 id="修改-ulimit"><a href="#修改-ulimit" class="headerlink" title="修改 ulimit"></a>修改 ulimit</h2><p>修改分为临时修改和永久修改，临时修改只对当前 session 有效，登出和重启后都恢复系统设置。</p><p>临时修改使用 <code>ulimit</code> 命令，以修改 open file(s) 为例。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n 1024000</span><br><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line">1024000</span><br></pre></td></tr></table></figure><p>永久修改需要修改 <code>/etc/security/limits.conf</code> 或者在 <code>/etc/security/limits.d/</code> 目录下添加一个文件。具体格式参考 <code>/etc/security/limits.conf</code>，里面有详细说明。</p><h2 id="open-file-s-上限"><a href="#open-file-s-上限" class="headerlink" title="open file(s) 上限"></a>open file(s) 上限</h2><p>回到遇到的问题中来：服务打开 80 万个左右的文件句柄就不能再打开了。所以， 尝试将 ulimit 设置为 1000 万，结果提示出错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">ulimit</span> -n 10000000</span><br><span class="line">-bash: <span class="built_in">ulimit</span>: open files: cannot modify <span class="built_in">limit</span>: Operation not permitted</span><br></pre></td></tr></table></figure><p>注意，使用的可以 root 用户，居然没有权限，然后尝试降低到：</p><ul><li>500 万，依然错误</li><li>300 万，依然错误</li><li>200 万，依然错误</li><li>100 万，成功了</li></ul><p>显然，这里有一个上限，大概在 100-200 万之间。</p><p>所以，解决问题的办法，在于怎样提高这个上限！</p><p>通过一番搜索，发现 open file(s) kernel 级别有 2 个配置，分别是：</p><p>fs.nr_open，进程级别<br>fs.file-max，系统级别</p><p><code>fs.nr_open</code> 默认设置的上限是 1048576，所以用户的 open file(s) 不可能超过这个上限。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl -w fs.nr_open=10000000</span><br><span class="line">$ <span class="built_in">ulimit</span> -n 10000000</span><br><span class="line">$ <span class="built_in">ulimit</span> -n</span><br><span class="line">10000000</span><br></pre></td></tr></table></figure><p>修改后即可设置更大的 open file(s) 了。</p><p>同样，对于 kernel 参数的修改，<code>sysctl</code> 命令修改的是当前运行时，如果需要永久修改， 则将配置添加到 <code>/etc/sysctl.conf</code> 中，例如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">"fs.nr_open = 10000000"</span> &gt;&gt; /etc/sysctl.conf</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">"fs.file-max = 11000000"</span> &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure><p>注意：<code>fs.nr_open</code> 总是应该小于等于 <code>fs.file-max</code>。</p><p>如果要查看当前打开的文件数，使用下面的命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sysctl fs.file-nr</span><br><span class="line">$ fs.file-nr = 1760       0       11000000</span><br></pre></td></tr></table></figure><p>不过，增大这些值意味着能够打开更多的文件（在 Linux 中，everything is file，包括 socket），但是同时也意味着消耗更多的资源，所以基本上在物理机上才会遇到这种问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在工作中遇到一个问题，尝试直接将服务运行在高配（40core, 192GB；相比虚拟机来说） 的物理机上，但是发现服务打开的文件句柄达到 80 万左右就不能再开更多了。&lt;/p&gt;
&lt;p&gt;80 万已经是一个不小的值了，通常情况下，Linux 默认的值都很小，例如：Debia
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
    
      <category term="linux" scheme="https://phpkoo.com/tags/linux/"/>
    
      <category term="ulimit" scheme="https://phpkoo.com/tags/ulimit/"/>
    
  </entry>
  
  <entry>
    <title>golang mod使用私有仓库相关事项</title>
    <link href="https://phpkoo.com/posts/580.html"/>
    <id>https://phpkoo.com/posts/580.html</id>
    <published>2019-10-12T13:48:57.000Z</published>
    <updated>2020-02-27T01:02:52.747Z</updated>
    
    <content type="html"><![CDATA[<p>一、Go get命令出现terminal prompts disabled解决</p><p>原因go get disable “terminal prompt” by default（Go get 命令默认禁用terminal prompt，即终端提示）</p><p>解决方案</p><p>设置环境变量：<code>GIT_TERMINAL_PROMPT=1</code>， 可以把上面的命令写到 <code>.bashrc</code> 或 <code>.bash_profile</code> 文件当中。</p><p>二、一键解决 go get golang.org/x 包失败</p><p>当我们使用 <code>go get</code>、<code>go install</code>、<code>go mod</code> 等命令时，会自动下载相应的包或依赖包。但由于众所周知的原因，类似于 <code>golang.org/x/...</code> 的包会出现下载失败的情况。如下所示：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ go get -u golang.org/x/sys  </span><br><span class="line">  </span><br><span class="line">go get golang.org/x/sys: unrecognized import path <span class="string">"golang.org/x/sys"</span> (https fetch: Get https://golang.org/x/sys?go-get=1: dial tcp 216.239.37.1:443: i/o timeout)</span><br></pre></td></tr></table></figure><p>我们可以通过设置GOPROXY 环境变量来解决，我们知道从 <code>Go 1.11</code> 版本开始，官方支持了 <code>go module</code> 包依赖管理工具。其实还新增了 <code>GOPROXY</code> 环境变量。</p><p>解决方案</p><p>设置环境变量：<code>GOPROXY=https://goproxy.io</code>， 可以把上面的命令写到 <code>.bashrc</code> 或 <code>.bash_profile</code> 文件当中。</p><p>三、总结</p><p>解决 terminal prompts disabled</p><p><code>export GIT_TERMINAL_PROMPT=1</code></p><p>解决 go get golang.org/x 包失败</p><p><code>export GOPROXY=https://goproxy.io</code></p><p>启用 Go Modules 功能</p><p><code>export GO111MODULE=on</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、Go get命令出现terminal prompts disabled解决&lt;/p&gt;
&lt;p&gt;原因go get disable “terminal prompt” by default（Go get 命令默认禁用terminal prompt，即终端提示）&lt;/p&gt;
&lt;p&gt;解
      
    
    </summary>
    
    
      <category term="GoLang" scheme="https://phpkoo.com/categories/GoLang/"/>
    
    
      <category term="golang" scheme="https://phpkoo.com/tags/golang/"/>
    
      <category term="mod" scheme="https://phpkoo.com/tags/mod/"/>
    
  </entry>
  
  <entry>
    <title>git报错 SSL connect error</title>
    <link href="https://phpkoo.com/posts/564.html"/>
    <id>https://phpkoo.com/posts/564.html</id>
    <published>2019-08-28T08:41:27.000Z</published>
    <updated>2020-02-27T01:02:52.745Z</updated>
    
    <content type="html"><![CDATA[<p>报错信息：  </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fatal: unable to access <span class="string">'https://github.com/***/***'</span>: SSL connect error</span><br></pre></td></tr></table></figure><p>解决办法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslversion tlsv1</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.sslVerify <span class="literal">false</span>   <span class="comment">#设置跳过SSL证书验证</span></span><br></pre></td></tr></table></figure><p>如果还不行，可能是ssh版本过低需要升级ssh。执行命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum update nss     <span class="comment">#redhat  centos</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;报错信息：  &lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://phpkoo.com/categories/PHP/"/>
    
    
  </entry>
  
  <entry>
    <title>centos下php7安装gmagick扩展</title>
    <link href="https://phpkoo.com/posts/511.html"/>
    <id>https://phpkoo.com/posts/511.html</id>
    <published>2019-01-18T04:13:28.000Z</published>
    <updated>2020-02-27T01:02:52.729Z</updated>
    
    <content type="html"><![CDATA[<p>GraphicsMagick 是 ImageMagick 的另一个分支功能和 ImageMagick 类似。下面我们介绍一下在PHP7下如何安装扩展。</p><p>一、安装 GraphicsMagick 依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install GraphicsMagick-devel</span><br></pre></td></tr></table></figure><p>二、选择手动方式安装gmagick（php扩展）<br>我们这里选择最新稳定版（gmagick-2.0.5RC1）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://pecl.php.net/get/gmagick-2.0.5RC1.tgz  </span><br><span class="line">tar -zxvf gmagick-2.0.5RC1.tgz  </span><br><span class="line"><span class="built_in">cd</span> gmagick-2.0.5RC1  </span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize  </span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config  </span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>三、选择pecl方式安装gmagick（php扩展）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl install gmagick</span><br></pre></td></tr></table></figure><p>四、修改php.ini 增加 extension，同时reload php-fpm 完成。</p><p>ps：<br>安装过程中可能出现以下问题<br>linux ‘….’:is not a valid libtool object”错误<br>解决方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><p>然后在重新执行命令，原因是编译的时候有问题重新编译一下文件就解决了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;GraphicsMagick 是 ImageMagick 的另一个分支功能和 ImageMagick 类似。下面我们介绍一下在PHP7下如何安装扩展。&lt;/p&gt;
&lt;p&gt;一、安装 GraphicsMagick 依赖&lt;/p&gt;
&lt;figure class=&quot;highlight sh
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://phpkoo.com/categories/PHP/"/>
    
    
      <category term="php" scheme="https://phpkoo.com/tags/php/"/>
    
      <category term="GMAGICK" scheme="https://phpkoo.com/tags/GMAGICK/"/>
    
  </entry>
  
  <entry>
    <title>CentOS下yum安装libmcrypt错误：No package libmcrypt available</title>
    <link href="https://phpkoo.com/posts/507.html"/>
    <id>https://phpkoo.com/posts/507.html</id>
    <published>2019-01-17T09:29:01.000Z</published>
    <updated>2020-02-27T01:02:52.731Z</updated>
    
    <content type="html"><![CDATA[<p>错误描述：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">yum install libmcrypt libmcrypt-devel</span><br><span class="line"></span><br><span class="line">Setting up Install Process</span><br><span class="line">No package libmcrypt available.</span><br><span class="line">No package libmcrypt-devel available.</span><br><span class="line">Error: Nothing to <span class="keyword">do</span></span><br></pre></td></tr></table></figure><p>我们会看到centos yum从仓库中根本找不到这几个包。但我不想使用源码编译就想使用yum安装，怎么办？<br>解决方法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release  <span class="comment">#扩展包更新包</span></span><br><span class="line">yum update <span class="comment">#更新yum源</span></span><br></pre></td></tr></table></figure><p>然后再重新</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install libmcrypt libmcrypt-devel</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;错误描述：&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
      <category term="PHP" scheme="https://phpkoo.com/categories/Linux/PHP/"/>
    
    
      <category term="centos7" scheme="https://phpkoo.com/tags/centos7/"/>
    
      <category term="yum" scheme="https://phpkoo.com/tags/yum/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore 不起作用的解决办法</title>
    <link href="https://phpkoo.com/posts/504.html"/>
    <id>https://phpkoo.com/posts/504.html</id>
    <published>2019-01-01T14:21:11.000Z</published>
    <updated>2020-02-27T01:02:52.746Z</updated>
    
    <content type="html"><![CDATA[<p>把某些目录或文件加入.gitignore规则，发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git rm -r --cached .</span><br><span class="line">git add .</span><br><span class="line">git commit -m 'update .gitignore'</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;把某些目录或文件加入.gitignore规则，发现并未生效，原因是.gitignore只能忽略那些原来没有被追踪的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。那么解决方法就是先把本地缓存删除（改变成未被追踪状态），然后再提交：&lt;/p&gt;
&lt;f
      
    
    </summary>
    
    
      <category term="Git" scheme="https://phpkoo.com/categories/Git/"/>
    
    
      <category term="git" scheme="https://phpkoo.com/tags/git/"/>
    
      <category term="gitignore" scheme="https://phpkoo.com/tags/gitignore/"/>
    
  </entry>
  
  <entry>
    <title>centos 7 下安装openvpn</title>
    <link href="https://phpkoo.com/posts/490.html"/>
    <id>https://phpkoo.com/posts/490.html</id>
    <published>2018-10-29T06:00:06.000Z</published>
    <updated>2020-02-27T01:02:52.722Z</updated>
    
    <content type="html"><![CDATA[<p>一、环境版本<br>1、CentOS 7.4<br>2、OpenVPN 2.4.6<br>3、easy-rsa 3.0</p><p>二、安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install epel-release</span><br><span class="line">yum install -y openssl openssl-devel lzo lzo-devel pam pam-devel automake pkgconfig makecache</span><br><span class="line">yum install -y openvpn</span><br><span class="line">yum install -y easy-rsa</span><br></pre></td></tr></table></figure><p>三、添加openvpn配置用户</p><p>#启动openvpn的用户</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd openvpn</span><br><span class="line">useradd -g openvpn -M -s /sbin/nologin openvpn</span><br></pre></td></tr></table></figure><p>四、创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/openvpn/</span><br><span class="line">cp -r /usr/share/easy-rsa/ /etc/openvpn/</span><br><span class="line">cp -r /usr/share/doc/easy-rsa-3.0.3/vars.example /etc/openvpn/easy-rsa/3.0/vars</span><br><span class="line">cp -r /usr/share/doc/openvpn-2.4.6/sample/sample-config-files/server.conf /etc/openvpn/server.conf</span><br></pre></td></tr></table></figure><p>五、修改easy-rsa密钥生成配置（修改第45、65、76、84-89、97、105、113、117、134、139、171、180、192行）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/openvpn/easy-rsa/3.0/vars</span><br><span class="line"></span><br><span class="line">set_var EASYRSA <span class="string">"<span class="variable">$PWD</span>"</span></span><br><span class="line">set_var EASYRSA_PKI <span class="string">"<span class="variable">$EASYRSA</span>/pki"</span></span><br><span class="line">set_var EASYRSA_DN <span class="string">"cn_only"</span></span><br><span class="line">set_var EASYRSA_REQ_COUNTRY <span class="string">"CN"</span></span><br><span class="line">set_var EASYRSA_REQ_PROVINCE <span class="string">"BEIJING"</span></span><br><span class="line">set_var EASYRSA_REQ_CITY <span class="string">"BEIJING"</span></span><br><span class="line">set_var EASYRSA_REQ_ORG <span class="string">"OpenVPN CERTIFICATE AUTHORITY"</span></span><br><span class="line">set_var EASYRSA_REQ_EMAIL <span class="string">"110@qq.com"</span></span><br><span class="line">set_var EASYRSA_REQ_OU <span class="string">"OpenVPN EASY CA"</span></span><br><span class="line">set_var EASYRSA_KEY_SIZE 2048</span><br><span class="line">set_var EASYRSA_ALGO rsa</span><br><span class="line">set_var EASYRSA_CA_EXPIRE 7000</span><br><span class="line">set_var EASYRSA_CERT_EXPIRE 3650</span><br><span class="line">set_var EASYRSA_NS_SUPPORT <span class="string">"no"</span></span><br><span class="line">set_var EASYRSA_NS_COMMENT <span class="string">"OpenVPN CERTIFICATE AUTHORITY"</span></span><br><span class="line">set_var EASYRSA_EXT_DIR <span class="string">"<span class="variable">$EASYRSA</span>/x509-types"</span></span><br><span class="line">set_var EASYRSA_SSL_CONF <span class="string">"<span class="variable">$EASYRSA</span>/openssl-1.0.cnf"</span></span><br><span class="line">set_var EASYRSA_DIGEST <span class="string">"sha256"</span></span><br></pre></td></tr></table></figure><p>六、生成ca证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/3.0</span><br><span class="line">./easyrsa init-pki</span><br><span class="line">./easyrsa build-ca</span><br><span class="line"><span class="comment">#设置ca密码（输入两次）：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#生成Diffie Hellman key exchange文件</span></span><br><span class="line">./easyrsa gen-dh</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成tls-auth key文件</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn</span><br><span class="line">openvpn --genkey --secret ta.key</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用gen-req来生成req</span></span><br><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/3.0</span><br><span class="line">./easyrsa  gen-req wwwserver</span><br><span class="line"></span><br><span class="line"><span class="comment">#签发服务端证书</span></span><br><span class="line">./easyrsa sign-req server wwwserver</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成客户端用户</span></span><br><span class="line">./easyrsa build-client-full www001</span><br></pre></td></tr></table></figure><p>七、修改openvpn服务端配置</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/openvpn/server.conf</span><br><span class="line"></span><br><span class="line">port 1194</span><br><span class="line">proto udp</span><br><span class="line">dev tun</span><br><span class="line">ca /etc/openvpn/easy-rsa/3.0/pki/ca.crt</span><br><span class="line">cert /etc/openvpn/easy-rsa/3.0/pki/issued/wwwserver.crt</span><br><span class="line">key /etc/openvpn/easy-rsa/3.0/pki/private/wwwserver.key</span><br><span class="line">dh /etc/openvpn/easy-rsa/3.0.3/pki/dh.pem</span><br><span class="line">tls-auth /etc/openvpn/ta.key 0</span><br><span class="line">server 10.8.0.0 255.255.255.0</span><br><span class="line">ifconfig-pool-persist ipp.txt</span><br><span class="line">push <span class="string">"redirect-gateway def1 bypass-dhcp"</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 223.5.5.5"</span></span><br><span class="line">push <span class="string">"dhcp-option DNS 114.114.114.114"</span></span><br><span class="line">keepalive 10 120</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">comp-lzo</span><br><span class="line">max-clients 50</span><br><span class="line">user openvpn</span><br><span class="line">group openvpn</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">status openvpn-status.log</span><br><span class="line"><span class="built_in">log</span>-append openvpn.log</span><br><span class="line">verb 3</span><br><span class="line">mute 20</span><br></pre></td></tr></table></figure><p>八、服务器防火墙和路由配置</p><p>在iptables中添加一条路由转发规则, 并保存:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE</span><br><span class="line">iptables-save</span><br></pre></td></tr></table></figure><p>同时, 我们必须在sysctl中启用ip forward.<br>打开文件vi /etc/sysctl.conf, 并添加以下内容:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_forward = 1</span><br></pre></td></tr></table></figure><p>然后重启网络:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><p>九、启动服务器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start openvpn@server</span><br><span class="line"><span class="comment">#启动时输入服务端证书密码：</span></span><br></pre></td></tr></table></figure><p>十、客户端配置（下载客户端证书）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/openvpn/client</span><br><span class="line">cp -r /etc/openvpn/easy-rsa/3.0/pki/issued/www001.crt /etc/openvpn/client/</span><br><span class="line">cp -r /etc/openvpn/easy-rsa/3.0/pki/private/www001.key /etc/openvpn/client/</span><br><span class="line">cp -r /etc/openvpn/easy-rsa/3.0/pki/ca.crt /etc/openvpn/client/</span><br><span class="line">cp -r /etc/openvpn/ta.key /etc/openvpn/client/</span><br></pre></td></tr></table></figure><p>十一、修改客户端ovpn文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">client</span><br><span class="line">dev tun</span><br><span class="line">proto udp</span><br><span class="line">remote xxx.xxx.xxx.xxx 1194 <span class="comment">#改成外网IP</span></span><br><span class="line">resolv-retry infinite</span><br><span class="line">nobind</span><br><span class="line">persist-key</span><br><span class="line">persist-tun</span><br><span class="line">comp-lzo</span><br><span class="line">ca ca.crt</span><br><span class="line">cert www001.crt</span><br><span class="line">key www001.key</span><br><span class="line">remote-cert-tls server</span><br><span class="line">tls-auth ta.key 1</span><br><span class="line">cipher AES-256-CBC</span><br><span class="line">keepalive 10 120</span><br><span class="line">verb 5</span><br></pre></td></tr></table></figure><p>ps<br>1、如果是阿里云的专用网络，需要配置放行1194端口udp<br>2、如生成证书时输错密码（删除以下文件即可）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /etc/openvpn/easy-rsa/3.0/pki/reqs/www001.req</span><br><span class="line">rm -rf /etc/openvpn/easy-rsa/3.0/pki/private/www001.key</span><br></pre></td></tr></table></figure><p>3、撤销证书</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/openvpn/easy-rsa/3.0</span><br><span class="line">./easyrsa revoke www001</span><br></pre></td></tr></table></figure><p>4、解决服务器每次都要输入Enter PEM pass phrase</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl rsa -<span class="keyword">in</span> server.key -out server.key.unsecure</span><br></pre></td></tr></table></figure><p>服务器改用这个server.key.unsecure就不会每次提示了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、环境版本&lt;br&gt;1、CentOS 7.4&lt;br&gt;2、OpenVPN 2.4.6&lt;br&gt;3、easy-rsa 3.0&lt;/p&gt;
&lt;p&gt;二、安装&lt;/p&gt;
&lt;figure class=&quot;highlight sh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;p
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://phpkoo.com/categories/Linux/"/>
    
    
      <category term="centos7" scheme="https://phpkoo.com/tags/centos7/"/>
    
      <category term="openvpn" scheme="https://phpkoo.com/tags/openvpn/"/>
    
  </entry>
  
  <entry>
    <title>centos下php7安装imagick扩展</title>
    <link href="https://phpkoo.com/posts/477.html"/>
    <id>https://phpkoo.com/posts/477.html</id>
    <published>2018-10-16T03:30:25.000Z</published>
    <updated>2020-02-27T01:02:52.730Z</updated>
    
    <content type="html"><![CDATA[<p>ImageMagick是一个用于查看、编辑位图文件以及进行图像格式转换的开放源代码软件套装。ImageMagick官方提供了多种开发语言的扩展或者类库。下面我们介绍一下在PHP7下如何安装扩展。</p><p>一、安装ImageMagick依赖</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install ImageMagick-devel</span><br></pre></td></tr></table></figure><p>二、选择手动方式安装imagick（php扩展）<br>我们这里选择最新稳定版（imagick-3.4.0）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://pecl.php.net/get/imagick-3.4.0.tgz</span><br><span class="line">tar -zxvf imagick-3.4.0.tgz</span><br><span class="line"><span class="built_in">cd</span> imagick-3.4.0</span><br><span class="line">/usr/<span class="built_in">local</span>/php/bin/phpize</span><br><span class="line">./configure --with-php-config=/usr/<span class="built_in">local</span>/php/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure><p>三、选择pecl方式安装imagick（php扩展）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pecl install imagick</span><br></pre></td></tr></table></figure><p>四、修改php.ini 增加 extension，同时reload php-fpm 完成。</p><p>ps：<br>安装过程中可能出现以下问题<br>linux ‘….’:is not a valid libtool object”错误<br>解决方法</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make clean</span><br></pre></td></tr></table></figure><p>然后在重新执行命令，原因是编译的时候有问题重新编译一下文件就解决了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;ImageMagick是一个用于查看、编辑位图文件以及进行图像格式转换的开放源代码软件套装。ImageMagick官方提供了多种开发语言的扩展或者类库。下面我们介绍一下在PHP7下如何安装扩展。&lt;/p&gt;
&lt;p&gt;一、安装ImageMagick依赖&lt;/p&gt;
&lt;figure cl
      
    
    </summary>
    
    
      <category term="PHP" scheme="https://phpkoo.com/categories/PHP/"/>
    
    
      <category term="php" scheme="https://phpkoo.com/tags/php/"/>
    
      <category term="imagick" scheme="https://phpkoo.com/tags/imagick/"/>
    
  </entry>
  
  <entry>
    <title>CentOS 安装 Docker CE</title>
    <link href="https://phpkoo.com/posts/468.html"/>
    <id>https://phpkoo.com/posts/468.html</id>
    <published>2018-06-07T09:41:29.000Z</published>
    <updated>2020-04-23T07:36:56.364Z</updated>
    
    <content type="html"><![CDATA[<p><strong>准备工作</strong></p><p><strong>一、系统要求</strong><br>Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能（如 overlay2 存储层驱动）无法使用，并且部分功能可能不太稳定。</p><p><strong>二、卸载旧版本</strong><br>旧版本的 Docker 称为 docker 或者 docker-engine，使用以下命令卸载旧版本：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">           docker-client \</span><br><span class="line">           docker-client-latest \</span><br><span class="line">           docker-common \</span><br><span class="line">           docker-latest \</span><br><span class="line">           docker-latest-logrotate \</span><br><span class="line">           docker-logrotate \</span><br><span class="line">           docker-selinux \</span><br><span class="line">           docker-engine-selinux \</span><br><span class="line">           docker-engine</span><br></pre></td></tr></table></figure><p><strong>三、使用 yum 安装</strong><br>执行以下命令安装依赖包：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils \</span><br><span class="line">           device-mapper-persistent-data \</span><br><span class="line">           lvm2</span><br></pre></td></tr></table></figure><p>鉴于国内网络问题，强烈建议使用国内源，官方源请在注释中查看。<br>执行下面的命令添加 yum 软件源：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="comment"># 官方源</span></span><br><span class="line">$ yum-config-manager \</span><br><span class="line">     --add-repo \</span><br><span class="line">     https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><p>如果需要最新版本的 Docker CE 请使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce</span><br></pre></td></tr></table></figure><p>如果需要测试版本的 Docker CE 请使用以下命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">enable</span> docker-ce-test</span><br></pre></td></tr></table></figure><p><strong>安装 Docker CE</strong><br>更新 yum 软件源缓存，并安装 docker-ce。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum makecache fast</span><br><span class="line">yum install docker-ce</span><br></pre></td></tr></table></figure><p>或者</p><p><strong>使用脚本自动安装</strong><br>在测试或开发环境中 Docker 官方为了简化安装流程，提供了一套便捷的安装脚本，CentOS 系统上可以使用这套脚本安装：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL get.docker.com -o get-docker.sh</span><br><span class="line">sh get-docker.sh --mirror Aliyun</span><br></pre></td></tr></table></figure><p>执行这个命令后，脚本就会自动的将一切准备工作做好，并且把 Docker CE 的 Edge 版本安装在系统中。</p><p><strong>启动 Docker CE</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="built_in">enable</span> docker</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure><p><strong>建立 docker 用户组（如果使用root用户操作 可忽略）</strong><br>默认情况下，docker 命令会使用 Unix socket 与 Docker 引擎通讯。而只有 root 用户和 docker 组的用户才可以访问 Docker 引擎的 Unix socket。出于安全考虑，一般 Linux 系统上不会直接使用 root 用户。因此，更好地做法是将需要使用 docker 的用户加入 docker 用户组。</p><p>建立 docker 组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd docker</span><br></pre></td></tr></table></figure><p>将当前用户加入 docker 组：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -aG docker <span class="variable">$USER</span></span><br></pre></td></tr></table></figure><p>退出当前终端并重新登录，进行如下测试。</p><p><strong>测试 Docker 是否安装正确</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><p><strong>添加内核参数</strong><br>默认配置下，如果在 CentOS 使用 Docker CE 看到下面的这些警告信息：</p><p>WARNING: bridge-nf-call-iptables is disabled<br>WARNING: bridge-nf-call-ip6tables is disabled</p><p>请添加内核配置参数以启用这些功能。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tee -a /etc/sysctl.conf &lt;&lt;-EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>然后重新加载 sysctl.conf 即可</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;准备工作&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一、系统要求&lt;/strong&gt;&lt;br&gt;Docker CE 支持 64 位版本 CentOS 7，并且要求内核版本不低于 3.10。 CentOS 7 满足最低内核的要求，但由于内核版本比较低，部分功能
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://phpkoo.com/categories/Docker/"/>
    
    
      <category term="docker" scheme="https://phpkoo.com/tags/docker/"/>
    
      <category term="centos7" scheme="https://phpkoo.com/tags/centos7/"/>
    
      <category term="docker-ce" scheme="https://phpkoo.com/tags/docker-ce/"/>
    
  </entry>
  
  <entry>
    <title>HTTPS中证书链不完整的解决方案</title>
    <link href="https://phpkoo.com/posts/458.html"/>
    <id>https://phpkoo.com/posts/458.html</id>
    <published>2018-06-01T09:13:55.000Z</published>
    <updated>2020-02-27T01:02:52.748Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain1.png" target="_blank" rel="noopener"><img src="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain1.png" alt=""></a></p><p><a href="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain2.png" target="_blank" rel="noopener"><img src="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain2.png" alt=""></a></p><p><a href="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain3.png" target="_blank" rel="noopener"><img src="https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain3.png" alt=""></a></p><p>由于我们的部分业务场景是在微信（WebView）中打开https的web页面，在测试过程中却发现了一个问题，在Chrome中测试完全正常的https页面，在iOS的微信（WebView）中表现正常，但在Android中，不论是哪个版本的安卓系统，都不能正常打开页面，要么就是一片白，要么就是直接无法打开，解决这个问题，需要在服务器上配置完整的SSL证书链。<br>之后在Android自带的浏览器中测试，几乎所有的手机都出现下面这样的情况</p><p><strong>证书链</strong><br>看来Andorid的WebView不能打开页面应该是与这有关，造成这个问题的主要原因是我们服务器配置证书的证书链不全造成的。</p><p>证书链其实就是描述证书的签名环节，就比如是 A 颁发证书给 B ，B颁发证书给C，然后我们手里的就是证书C。当证书链不完整的情况下，也就是没有描述我们手中的证书C是由谁办法的，所以导致的浏览器不认为你这个证书是可信的授权证书。</p><p>每个设备中都会存有一些默认的可信的根证书，但很多CA是不使用根证书进行签名的，而是使用中间层证书进行签名，因为这样做能更快的进行替换（这句可能不对，原文是 because these can be rotated more frequently）。</p><p>如果你的服务器上没有中间件证书，这样的结果就是你的服务器上只有你的网站的证书，客户端的浏览器里只有CA的根证书，这样就会导致证书信任链不全，才导致了上面那两个截图中的问题。这种中间层证书不全的问题多出现在移动端的浏览器上（就我目前看，iOS8 iOS9 都没有出现问题，Andorid各个版本都有这个问题）。</p><p>当你服务器上的证书中的信任链不全的情况下，浏览器会认为当前的链接是一个不安全的，会阻止页面的打开。</p><p><strong>解决方案</strong><br>说清楚了原因，解决问题就很简单了，只要把我们的证书链补全就可以了。<br>从SSL证书服务商那里，你获得的crt证书文件大概是这个样子的：</p><p>—–BEGIN CERTIFICATE—–<br>    # 证书内容<br>—–END CERTIFICATE—–</p><p>在你补全中间层证书和根证书后，新的crt证书文件看起来是这样的：</p><p>—–BEGIN CERTIFICATE—–<br>    # 证书内容 1<br>—–END CERTIFICATE—–</p><p>—–BEGIN CERTIFICATE—–<br>    # 证书内容 2<br>—–END CERTIFICATE—–</p><p>—–BEGIN CERTIFICATE—–<br>    # 证书内容 3<br>—–END CERTIFICATE—–</p><p>这里包含了你的证书，以及从你的证书向上递归直至根证书的全部证书，这样就可以向浏览器证明你的链接是安全的。</p><p><strong>补全证书链</strong><br>比较方便的是使用这个在线的工具：<br><a href="https://certificatechain.io" target="_blank" rel="noopener">https://certificatechain.io</a><br>进入这个网站，粘贴进你的证书（只包含你的用户证书），或者上传你的证书，他就会给出补全后的证书文件，你只需要粘贴回你的文件或者下载覆盖就可以了，然后在服务器上重新部署就可以解决问题。<br>由于这里只需要上传证书，所以是安全的，不需要担心不安全的问题。<br>如果不喜欢用在线的工具，可以使用下面这个本地的工具，PHP写的，在命令行中运行：<br><a href="https://github.com/spatie/ssl-certificate-chain-resolver" target="_blank" rel="noopener">Github ssl-certificate-chain-resolver</a></p><p><strong>PS:</strong><br>一般情况下<br>cert.pem 是证书<br>chain.pem 是证书链编码<br>fullchain.pem 是cert.pem和chain.pem的证书集合<br>privkey.pem 是私钥文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://upload.phpkoo.com/uploads/2018/06/httpsCertificateChain1.png&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://upload.ph
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://phpkoo.com/categories/Nginx/"/>
    
    
      <category term="https" scheme="https://phpkoo.com/tags/https/"/>
    
      <category term="证书链" scheme="https://phpkoo.com/tags/%E8%AF%81%E4%B9%A6%E9%93%BE/"/>
    
  </entry>
  
</feed>
